/**
 * Starter code with JUnit tests for code generation used in the class project in COP5556 Programming Language Principles 
 * at the University of Florida, Spring 2018.
 * 
 * This software is solely for the educational benefit of students 
 * enrolled in the course during the Spring 2018 semester.  
 * 
 * This software, and any software derived from it,  may not be shared with others or posted to public web sites,
 * either during the course or afterwards.
 * 
 *  @Beverly A. Sanders, 2018
 */


package cop5556sp18;

import static org.junit.Assert.*;

import java.awt.image.BufferedImage;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import javax.swing.JFrame;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import cop5556sp18.CodeGenUtils.DynamicClassLoader;
import cop5556sp18.AST.Program;

public class CodeGenTest {
	
	//determines whether show prints anything
	static boolean doPrint = true;
	
	static void show(Object s) {
		if (doPrint) {
			System.out.println(s);
		}
	}

	//determines whether a classfile is created
	static boolean doCreateFile = false;

	@Rule
	public ExpectedException thrown = ExpectedException.none();
	

	//values passed to CodeGenerator constructor to control grading and debugging output
	private boolean devel = true; //if true, print devel output
	private boolean grade = true; //if true, print grade output
	
//	private boolean devel = false; 
//	private boolean grade = false; 
	
	//sets the default width and height of newly created images.  Should be small enough to fit on screen.
	public static final int defaultWidth = 1024;
	public static final int defaultHeight = 1024;

	
	/**
	 * Generates bytecode for given input.
	 * Throws exceptions for Lexical, Syntax, and Type checking errors
	 * 
	 * @param input   String containing source code
	 * @return        Generated bytecode
	 * @throws Exception
	 */
	byte[] genCode(String input) throws Exception {
		
		//scan, parse, and type check
		Scanner scanner = new Scanner(input);
		show(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		Program program = parser.parse();
		TypeChecker v = new TypeChecker();
		program.visit(v, null);
//		show(program);  //It may be useful useful to show this here if code generation fails

		//generate code
		CodeGenerator cv = new CodeGenerator(devel, grade, null, defaultWidth, defaultHeight);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		show(program); //doing it here shows the values filled in during code gen
		//display the generated bytecode
		show(CodeGenUtils.bytecodeToString(bytecode));
		
		//write byte code to file 
		if (doCreateFile) {
			String name = ((Program) program).progName;
			String classFileName = "bin/" + name + ".class";
			OutputStream output = new FileOutputStream(classFileName);
			output.write(bytecode);
			output.close();
			System.out.println("wrote classfile to " + classFileName);
		}
		
		//return generated classfile as byte array
		return bytecode;
	}
	
	/**
	 * Run main method in given class
	 * 
	 * @param className    
	 * @param bytecode    
	 * @param commandLineArgs  String array containing command line arguments, empty array if none
	 * @throws + 
	 * @throws Throwable 
	 */
	void runCode(String className, byte[] bytecode, String[] commandLineArgs) throws Exception  {
		RuntimeLog.initLog(); //initialize log used for grading.
		DynamicClassLoader loader = new DynamicClassLoader(Thread.currentThread().getContextClassLoader());
		Class<?> testClass = loader.define(className, bytecode);
		@SuppressWarnings("rawtypes")
		Class[] argTypes = {commandLineArgs.getClass()};
		Method m = testClass.getMethod("main", argTypes );
		show("Output from " + m + ":");  //print name of method to be executed
		Object passedArgs[] = {commandLineArgs};  //create array containing params, in this case a single array.
		try {
		m.invoke(null, passedArgs);	
		}
		catch (Exception e) {
			Throwable cause = e.getCause();
			if (cause instanceof Exception) {
				Exception ec = (Exception) e.getCause();
				throw ec;
			}
			throw  e;
		}
	}
	

	/**
	 * When invoked from JUnit, Frames containing images will be shown and then immediately deleted.
	 * To prevent this behavior, waitForKey will pause until a key is pressed.
	 * 
	 * @throws IOException
	 */
	void waitForKey() throws IOException {
		System.out.println("enter any char to exit");
		System.in.read();
	}

	/**
	 * When invoked from JUnit, Frames containing images will be shown and then immediately deleted.
	 * To prevent this behavior, keepFrame will keep the frame visible for 5000 milliseconds.
	 * 
	 * @throws Exception
	 */
	void keepFrame() throws Exception {
		Thread.sleep(5000);
	}
	
	
	
	


	/**
	 * Since we are not doing any optimization, the compiler will 
	 * still create a class with a main method and the JUnit test will
	 * execute it.  
	 * 
	 * The only thing it will do is append the "entering main" and "leaving main" messages to the log.
	 * 
	 * @throws Exception
	 */
//	@Test
//	public void emptyProg() throws Exception {
//		String prog = "emptyProg";	
//		String input = prog + "{}";
//		byte[] bytecode = genCode(input);
//		String[] commandLineArgs = {};
//		runCode(prog, bytecode, commandLineArgs);
//		show("Log:\n "+RuntimeLog.globalLog);
//		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
//	}
	
	
	@Test
	public void hwErrors() throws Exception {
		String prog = "prog";
//		String input = prog + "{show 0.2 + 0.2;}";	
//		String input = prog + "{show !1; show !-1; show !0; show !-2;} ";
		String input = prog + "{image x; input x from @ 0 ; show x; image y; y := x; show y;}";
//		String input = prog + "{float a; a := float(-3.7); show a; a := float(4); show a;}";
//		String input = prog + "{image y[512,256];\n show y;}";

		byte[] bytecode = genCode(input);		//I2F
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
//		assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void integerLit() throws Exception {
		String prog = "prog";
		String input = prog + "{image y;\n show y;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void floatBool() throws Exception {
		String prog = "boolLit";
		String input = prog + "{show(false);} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	
	
	@Test
	public void testSleep() throws Exception {
		String prog = "sl";
		String input = prog + "{sleep(3);} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	
	@Test
	public void testDec() throws Exception {
		String prog = "Dec";
		String input = prog + "{float x;int y; x:=1.2;y:=2;float g;g:=x**y;show g;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;1.44;leaving main;",RuntimeLog.globalLog.toString());
	}

	
	@Test
	public void testImgDec() throws Exception {
		String prog = "Dec";
		String input = prog + "{boolean i;i:=true;i:=!i;show i;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test 
	public void FandBLit() throws Exception {
		String prog = "FandBLit";
		String input = prog + "{int x;x:=3;show x;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test 
	public void sleep1() throws Exception {
		String prog = "FandBLit";
		String input = prog + "{sleep 3;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
	}
	@Test 
	public void sleep2() throws Exception {
		String prog = "FandBLit";
		String input = prog + "{int x;x:= 3;sleep x;show x;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
	}
	@Test 
	public void decint1() throws Exception {
		String prog = "FandqBLit";
		String input = prog + "{image x;show x;sleep 1000;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
	}
	@Test 
	public void decint2() throws Exception {
		String prog = "FandBLit";
		String input = prog + "{int x;x:=3;show x;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
	}
	@Test 
	public void decimage() throws Exception {
		String prog = "FandBLit";
		String input = prog + "{image im[100,100];image newon;filename that;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
	}
	@Test 
	public void staetmentassign1() throws Exception {
		String prog = "FandBLit";
		String input = prog + "{int x;x:=3;float y; y:=2.4;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
	}
	@Test 
	public void staetmentassign2() throws Exception {
		String prog = "FandBLit";
		String input = prog + "{int x;x:=2**4;show x;float y;y:=2.4**3;y:=2.5**3.0;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
	}
	@Test 
	public void staetmentassign3() throws Exception {
		String prog = "FandBLit";
		String input = prog + "{int x;x:=2;float y;y:=1.0;x:=x+1;y:=y+x;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
	}
	@Test 
	public void expression1() throws Exception {
		String prog = "FandBLit";
		String input = prog + "{int x;x:=2;x:= !x;float y;y:=-2.0+!10;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
	}
	@Test
	public void expression2() throws Exception {
		String prog = "FandBLit";
		String input = prog + "{boolean x;x:=true;x:= !x;show x;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
	}
	@Test 
	public void functiontest1() throws Exception {
		String prog = "functiontest";
		String input = prog + "{int x;x:=2;float y; y:=2.5;x:=abs(x);y:=cos(y)+sin(y)+atan(y)+log(10.2);} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
	}
	@Test 
	public void functiontest2() throws Exception {
		String prog = "functiontest";
		String input = prog + "{int x;x:=2;float y;image z; y:=2.5;x:=abs(x);y:=cos(y)+sin(y)+atan(y)+log(10.2)+float(x);"
				+ "x:=int(width(z)+y);} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
	}
	@Test 
	public void statementinput0() throws Exception {
		String prog = "functiontest";
		String input = prog + "{int x;boolean y;input x from @ 0;show x;input y from @ 1;show y;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"10","true"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
	}
	@Test 
	public void statementinput1() throws Exception {
		String prog = "functiontest";
		String input = prog + "{image x;input x from @ 0;show x;sleep(5000);} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://upload.wikimedia.org/wikipedia/commons/thumb/c/cf/Angular_full_color_logo.svg/500px-Angular_full_color_logo.svg.png"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
	}
	
	@Test
	public void readImageFromCommandLine() throws Exception {
		String prog = "functiontest";
		String input = prog + "{image y[100,200]; input y from @ 0 ; show y;sleep(5000);}  ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://upload.wikimedia.org/wikipedia/commons/thumb/c/cf/Angular_full_color_logo.svg/500px-Angular_full_color_logo.svg.png"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void testBinary1() throws Exception {
		String prog = "functiontest";
		String input = prog + "{show 9 + 4;show 9 - 4;show 9 * 4;show 9 / 4;show 9 ** 4;show 9 % 4;show 9 & 4;show 9 | 4;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;13;5;36;2;6561;1;0;13;leaving main;",RuntimeLog.globalLog.toString());
	}
	

	@Test
	public void unaryOpNot1() throws Exception {
		String prog = "functiontest";
		String input = prog + "{show !false; show !true; show !(true | false); show !(true & false);} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;false;false;true;leaving main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void unaryOpNot2() throws Exception {
		String prog = "functiontest";
		String input = prog + "{show !1; show !-1; show !0; show !-2;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;-2;0;-1;1;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void prece() throws Exception {
		String prog = "functiontest";
		String input = prog + "{show 1 --2 * 3 & 14;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;6;leaving main;",RuntimeLog.globalLog.toString());
	}
	

	@Test
	public void mismatchImg() throws Exception {
		String prog = "assignImage1";
		String input = prog + "{image x; input x from @ 0 ; show x; image y; y := x; show y;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://upload.wikimedia.org/wikipedia/commons/thumb/c/cf/Angular_full_color_logo.svg/500px-Angular_full_color_logo.svg.png"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
	}
	

	@Test
	public void cpyImg() throws Exception {
		String prog = "assignImage1";
		String input = prog + "{int a; a := 123456789; show alpha(a); a := -1; show alpha(a);}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://angular.io/generated/images/marketing/home/ng-conf.png"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
	}
//	
	@Test
	public void hwErrors2() throws Exception {
		String prog = "prog";
		String input = prog + "{show 9 + 4;show 9 - 4;show 9 * 4;show 9 / 4;show 9 ** 4;show 9 % 4;show 9 & 4;show 9 | 4;}";
		byte[] bytecode = genCode(input);		//I2F
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
//		assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
//	
	
	

}